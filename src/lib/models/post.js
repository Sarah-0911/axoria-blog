import mongoose from "mongoose";
import slugify from "slugify"; // üì¶ G√©n√®re un slug (cha√Æne lisible et URL-friendly) √† partir d‚Äôun texte

// üîπ D√©finition du sch√©ma de Post (structure des donn√©es dans MongoDB)
const postSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  markdownArticle: {
    type: String,
    required: true
  },
  markdownHTMLResult: {
    type: String,
    required: true
  },
  slug: {
    type: String,
    unique: true   // chaque slug doit √™tre unique pour √©viter les conflits d'URL
  },
  tags: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: "Tag"  // dit √† Mongoose de faire le lien avec le mod√®le Tag
  }]
}, {timestamps: true})   // ajoute automatiquement createdAt et updatedAt


// üîπ Middleware ex√©cut√© avant l'enregistrement d'un document (pre-save)
postSchema.pre("save", async function(next) {
  if(!this.slug) {
    // G√©n√®re un slug initial √† partir du titre, en minuscule et sans caract√®res sp√©ciaux
    let baseSlug  = slugify(this.title, { lower: true, strict: true })
    let slugCandidate = baseSlug;

    // V√©rifie si un autre document a d√©j√† ce slug
    let slugExists = await mongoose.models.Post.findOne({slug: slugCandidate});

    let counter = 1;
    while(slugExists) {
      // Si le slug existe d√©j√†, ajoute un suffixe num√©rique (ex: "-1", "-2", etc.)
      slugCandidate = `${baseSlug}-${counter}`;
      slugExists = await mongoose.models.Post.findOne({slug: slugCandidate});
      counter++;
    }
    // Assigne le slug final au document
    this.slug = slugCandidate;
    console.log("Final slug:", slugCandidate)
  }
  next(); // passe √† l'√©tape suivante (enregistrement dans la base)
})

// üîπ Cr√©ation (ou r√©cup√©ration) du mod√®le mongoose √† partir du sch√©ma
// ‚úÖ Si le mod√®le existe d√©j√† (ex. apr√®s un hot reload), on le r√©utilise
// ‚ùó Sinon on le cr√©e (Mongoose interdit de recr√©er un mod√®le du m√™me nom)
export const Post = mongoose.models?.Post || mongoose.model("Post", postSchema);
