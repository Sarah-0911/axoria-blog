import mongoose from "mongoose";

export async function connectToDB () {
  if (mongoose.connection.readyState) {
    console.log("Using existing connection:", mongoose.connection.name);
    return;
  }

  try {
    await mongoose.connect(process.env.MONGO);
    console.log("Connected to database", mongoose.connection.name);
  } catch (err) {
    throw new Error("Failed to connect to the Database")
  }
}


/*
ğŸ§  MONGOOSE MEMO â€” ODM pour MongoDB

ğŸ”¹ ODM = Object Document Mapper
   â†³ Fait le lien entre MongoDB (base NoSQL orientÃ©e documents)
     et les objets JS dans notre code.

ğŸ”¹ Permet :
  âœ… DÃ©finir un schÃ©ma strict (types, required, defaultsâ€¦)
  âœ… Valider les donnÃ©es avant enregistrement
  âœ… CrÃ©er des mÃ©thodes et hooks personnalisÃ©s
  âœ… Simplifier les requÃªtes MongoDB

ğŸ”¹ Exemple :
   const userSchema = new mongoose.Schema({
     name: { type: String, required: true },
     age: Number
   });

   const User = mongoose.model("User", userSchema);

   const user = new User({ name: "Alice", age: 25 });
   await user.save();
*/


/*
ğŸ§  Server Component vs Server Action (Next.js)

ğŸ”¹ Server Component (par dÃ©faut) :
   - ExÃ©cutÃ© cÃ´tÃ© serveur (ex: async function Home())
   - Peut appeler des fonctions serveur (ex: connectToDB())
   - âœ… Pas besoin de "use server"

ğŸ”¹ Server Action :
   - Fonction appelÃ©e depuis le **client** (ex: via form action)
   - UtilisÃ©e pour traiter des donnÃ©es (formulaires, requÃªtes)
   - âœ… DOIT avoir "use server" au dÃ©but

ğŸ”¸ RÃ¨gle :
   â†’ Si le client appelle la fonction â‡’ "use server" requis
   â†’ Si tout reste cÃ´tÃ© serveur â‡’ pas besoin
*/

